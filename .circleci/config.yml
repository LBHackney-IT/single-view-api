version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@3.0.0
  aws-cli: circleci/aws-cli@5.1.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
    docker:
      - image: circleci/python:3.7
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:light"
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  preview-terraform:
    description: "Previews terraform state changes"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
            terraform plan
          name: get, init, and plan
  terraform-init-then-apply:
    description: "Initializes and applies terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: apply
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform apply -auto-approve
  deploy-lambda:
    description: "Deploys API via Serverless"
    parameters:
      stage:
        type: string
      aws-account:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_20.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install serverless CLI
          command: npm i -g serverless@^3
      - run:
          name: Install aws alerts CLI
          command: npm i -g serverless-plugin-aws-alerts
      - run:
          name: Build lambda
          command: |
            cd ./SingleViewApi/
            chmod +x ./build.sh
            ./build.sh
      - run:
          name: Deploy lambda
          command: |
            cd ./SingleViewApi/
            sls deploy --stage <<parameters.stage>> --conceal

  migrate-database:
    description: "Migrate database"
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: debug
          command: |
            pwd
            ls -al
      - run:
          name: Install Unzip
          command: apt-get update && apt-get install unzip
      - run:
          name: Install dotnet ef core
          command: dotnet tool install dotnet-ef --tool-path ./dotnet-ef-local/ --version 6.*
      - run:
          name: Install ssh
          command: apt-get update && apt-get -y install openssh-server
      - run:
          name: Install AWS CLI
          command: |
            curl -L -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Install Session Manager plugin
          command: |
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
            dpkg -i session-manager-plugin.deb
      - run:
          name: SSH into RDS and migrate database
          command: |
            aws ssm get-parameter --name "/single-view/<<parameters.stage>>/jump-box-pem-key" --output text --query Parameter.Value > ./private-key.pem
            chmod 400 ./private-key.pem
            HOST=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/postgres-hostname --query Parameter.Value)
            PORT=5302
            INSTANCE_ID=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/jump-box-instance-id --query Parameter.Value)
            ssh -4 -i ./private-key.pem -Nf -M -L ${PORT//\"}:${HOST//\"}:${PORT//\"} -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o ProxyCommand="aws ssm start-session --target %h --document AWS-StartSSHSession --parameters portNumber=%p --region=eu-west-2" ec2-user@${INSTANCE_ID//\"}
            PASSWORD=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/postgres-password --query Parameter.Value --with-decryption)
            USERNAME=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/postgres-username --query Parameter.Value)
            DATABASE=singleview
            CONN_STR="Host=localhost;Password=${PASSWORD};Port=${PORT};Username=${USERNAME};Database=${DATABASE}"
            cd ./SingleViewApi/
            CONNECTION_STRING=${CONN_STR} ./../dotnet-ef-local/dotnet-ef database update
  test-command:
    description: "Re-encrypt the database."
    steps:
      - aws-cli/install
      - *attach_workspace
      - run:
          name: "Re-encrypt the database job."
          command: |
            OPERATION_STATUS=''
            TARGET_DATABASE_INSTANCE_ID='singleview-db-production'
            MANUAL_UNENCRYPTED_SNAPSHOT_NAME='singleview-db-production-old-key-snapshot'
            ENCRYPTED_SNAPSHOT_NAME='singleview-db-production-new-key-snapshot'
            VAULT_KMS_KEY_ALIAS='local-backup-key'

            DB_INSTANCE_IDENTIFIER_TEMP_NEW=${TARGET_DATABASE_INSTANCE_ID}-new
            DB_INSTANCE_IDENTIFIER_TEMP_OLD=${TARGET_DATABASE_INSTANCE_ID}-old

            # Prepare the database for better snapshots
            aws rds modify-db-instance \
              --db-instance-identifier $TARGET_DATABASE_INSTANCE_ID \
              --copy-tags-to-snapshot

            # Actual Job being tested
            aws rds create-db-snapshot \
              --db-snapshot-identifier $MANUAL_UNENCRYPTED_SNAPSHOT_NAME \
              --db-instance-identifier $TARGET_DATABASE_INSTANCE_ID

            until (echo $OPERATION_STATUS | grep -iqP '^available$');
            do
              OPERATION_STATUS=$( \
                aws rds describe-db-snapshots \
                  --db-snapshot-identifier $MANUAL_UNENCRYPTED_SNAPSHOT_NAME \
                  --snapshot-type 'manual' \
                  --query 'DBSnapshots[].Status | [0]' \
                  --no-paginate \
                  --output text \
                )
              echo "The $MANUAL_UNENCRYPTED_SNAPSHOT_NAME snapshot is: $OPERATION_STATUS."
              sleep 1s
            done

            VAULT_KMS_KEY_ID=$( \
              aws kms list-aliases \
                --query "Aliases[?contains(AliasName, '$VAULT_KMS_KEY_ALIAS')].TargetKeyId | [0]" \
                --output text \
              )

            UNENCRYPTED_SNAPSHOT_ARN=$( \
              aws rds describe-db-snapshots \
                --db-snapshot-identifier $MANUAL_UNENCRYPTED_SNAPSHOT_NAME \
                --snapshot-type 'manual' \
                --query "DBSnapshots[?Status=='available'].DBSnapshotArn | [0]" \
                --no-paginate \
                --output text \
              )

            echo "*$UNENCRYPTED_SNAPSHOT_ARN*"

            aws rds copy-db-snapshot \
              --source-db-snapshot-identifier "$UNENCRYPTED_SNAPSHOT_ARN" \
              --target-db-snapshot-identifier "$ENCRYPTED_SNAPSHOT_NAME" \
              --source-region 'eu-west-2' \
              --copy-tags \
              --no-copy-option-group \
              --kms-key-id $VAULT_KMS_KEY_ID

            OPERATION_STATUS=''

            until (echo $OPERATION_STATUS | grep -iqP '^available$');
            do
              OPERATION_STATUS=$( \
                aws rds describe-db-snapshots \
                  --db-snapshot-identifier $ENCRYPTED_SNAPSHOT_NAME \
                  --snapshot-type 'manual' \
                  --query 'DBSnapshots[].Status | [0]' \
                  --no-paginate \
                  --output text \
                )
              echo "The $ENCRYPTED_SNAPSHOT_NAME snapshot is: $OPERATION_STATUS."
              sleep 1s
            done

            # restore from snapshot -----------------------------------------------------

            echo "Fetching details of the non-encrypted RDS instance..."
            INSTANCE_DETAILS=$( \
              aws rds describe-db-instances \
                --db-instance-identifier $TARGET_DATABASE_INSTANCE_ID \
                --query 'DBInstances[0]' \
              )

            # TODO: double check the jq path keys
            DB_INSTANCE_CLASS=$(echo $INSTANCE_DETAILS | jq -r '.DBInstanceClass')
            ENGINE=$(echo $INSTANCE_DETAILS | jq -r '.Engine')
            AVAILABILITY_ZONE=$(echo $INSTANCE_DETAILS | jq -r '.AvailabilityZone')
            DB_SUBNET_GROUP=$(echo $INSTANCE_DETAILS | jq -r '.DBSubnetGroup.DBSubnetGroupName')
            VPC_SECURITY_GROUPS=$(echo $INSTANCE_DETAILS | jq -r '.VpcSecurityGroups[].VpcSecurityGroupId' | tr '\n' ' ')
            DB_PARAMETER_GROUP=$(echo $INSTANCE_DETAILS | jq -r '.DBParameterGroups[0].DBParameterGroupName')
            OPTION_GROUP=$(echo $INSTANCE_DETAILS | jq -r '.OptionGroupMemberships[0].OptionGroupName')
            ALLOCATED_STORAGE=$(echo $INSTANCE_DETAILS | jq -r '.AllocatedStorage')
            STORAGE_TYPE=$(echo $INSTANCE_DETAILS | jq -r '.StorageType')
            DB_PORT=$(echo $INSTANCE_DETAILS | jq -r '.Endpoint.Port')
            BACKUP_TARGET=$(echo $INSTANCE_DETAILS | jq -r '.BackupTarget')
            CA_CERTIFICATE_IDENTIFIER=$(echo $INSTANCE_DETAILS | jq -r '.CACertificateIdentifier')
            ENGINE_LIFECYCLE_SUPPORT=$(echo $INSTANCE_DETAILS | jq -r '.EngineLifecycleSupport')
            AUTO_MINOR_VERSION_UPGRADE=$(echo $INSTANCE_DETAILS | jq -r '.AutoMinorVersionUpgrade')
            MULTI_AZ=$(echo $INSTANCE_DETAILS | jq -r '.MultiAZ')
            PUBLICLY_ACCESSIBLE=$(echo $INSTANCE_DETAILS | jq -r '.PubliclyAccessible')
            COPY_TAGS_TO_SNAPSHOT=$(echo $INSTANCE_DETAILS | jq -r '.CopyTagsToSnapshot')
            ENABLE_IAM_DB_AUTH=$(echo $INSTANCE_DETAILS | jq -r '.IAMDatabaseAuthenticationEnabled')
            DELETION_PROTECTION=$(echo $INSTANCE_DETAILS | jq -r '.DeletionProtection')
            DEDICATED_LOG_VOLUME=$(echo $INSTANCE_DETAILS | jq -r '.DedicatedLogVolume')

            echo "Restoring RDS instance from snapshot..."
            aws rds restore-db-instance-from-db-snapshot \
              --db-instance-identifier $DB_INSTANCE_IDENTIFIER_TEMP_NEW \
              --db-snapshot-identifier $ENCRYPTED_SNAPSHOT_NAME \
              $(if [ $DB_INSTANCE_CLASS != 'null' ] &&  [ -n $DB_INSTANCE_CLASS ]; then echo '--db-instance-class' $DB_INSTANCE_CLASS; fi) \
              $(if [ $ENGINE != 'null' ] &&  [ -n $ENGINE ]; then echo '--engine' $ENGINE; fi) \
              $(if [ $AVAILABILITY_ZONE != 'null' ] &&  [ -n $AVAILABILITY_ZONE ]; then echo '--availability-zone' $AVAILABILITY_ZONE; fi) \
              $(if [ $DB_SUBNET_GROUP != 'null' ] &&  [ -n $DB_SUBNET_GROUP ]; then echo '--db-subnet-group-name' $DB_SUBNET_GROUP; fi) \
              $(if [ "$VPC_SECURITY_GROUPS" != 'null' ] &&  [ -n "$VPC_SECURITY_GROUPS" ]; then echo '--vpc-security-group-ids' $VPC_SECURITY_GROUPS; fi) \
              $(if [ $DB_PARAMETER_GROUP != 'null' ] &&  [ -n $DB_PARAMETER_GROUP ]; then echo '--db-parameter-group-name' $DB_PARAMETER_GROUP; fi) \
              $(if [ $OPTION_GROUP != 'null' ] &&  [ -n $OPTION_GROUP ]; then echo '--option-group-name' $OPTION_GROUP; fi) \
              $(if [ $ALLOCATED_STORAGE != 'null' ] &&  [ -n $ALLOCATED_STORAGE ]; then echo '--allocated-storage' $ALLOCATED_STORAGE; fi) \
              $(if [ $STORAGE_TYPE != 'null' ] &&  [ -n $STORAGE_TYPE ]; then echo '--storage-type' $STORAGE_TYPE; fi) \
              $(if [ $DB_PORT != 'null' ] &&  [ -n $DB_PORT ]; then echo '--port' $DB_PORT; fi) \
              $(if [ $BACKUP_TARGET != 'null' ] &&  [ -n $BACKUP_TARGET ]; then echo '--backup-target' $BACKUP_TARGET; fi) \
              $(if [ $CA_CERTIFICATE_IDENTIFIER != 'null' ] &&  [ -n $CA_CERTIFICATE_IDENTIFIER ]; then echo '--ca-certificate-identifier' $CA_CERTIFICATE_IDENTIFIER; fi) \
              $(if [ $ENGINE_LIFECYCLE_SUPPORT != 'null' ] &&  [ -n $ENGINE_LIFECYCLE_SUPPORT ]; then echo '--engine-lifecycle-support' $ENGINE_LIFECYCLE_SUPPORT; fi) \
              --no-paginate \
              $(if [ $AUTO_MINOR_VERSION_UPGRADE = 'true' ]; then echo '--auto-minor-version-upgrade'; else echo '--no-auto-minor-version-upgrade'; fi) \
              $(if [ $MULTI_AZ = 'true' ]; then echo '--multi-az'; else echo '--no-multi-az'; fi) \
              $(if [ $PUBLICLY_ACCESSIBLE = 'true' ]; then echo '--publicly-accessible'; else echo '--no-publicly-accessible'; fi) \
              $(if [ $COPY_TAGS_TO_SNAPSHOT = 'true' ]; then echo '--copy-tags-to-snapshot'; else echo '--no-copy-tags-to-snapshot'; fi) \
              $(if [ $ENABLE_IAM_DB_AUTH = 'true' ]; then echo '--enable-iam-database-authentication'; else echo '--no-enable-iam-database-authentication'; fi) \
              $(if [ $DELETION_PROTECTION = 'true' ]; then echo '--deletion-protection'; else echo '--no-deletion-protection'; fi) \
              $(if [ $DEDICATED_LOG_VOLUME = 'true' ]; then echo '--dedicated-log-volume'; else echo '--no-dedicated-log-volume'; fi)

            OPERATION_STATUS=''

            until (echo $OPERATION_STATUS | grep -iqP '^available$');
            do
              OPERATION_STATUS=$( \
                aws rds describe-db-instances \
                  --db-instance-identifier $DB_INSTANCE_IDENTIFIER_TEMP_NEW \
                  --query 'DBInstances[].DBInstanceStatus | [0]' \
                  --no-paginate \
                  --output text \
                )
              echo "The $DB_INSTANCE_IDENTIFIER_TEMP_NEW RDS instance is: $OPERATION_STATUS."
              sleep 1s
            done

            # Actual proper switch
            aws rds modify-db-instance \
              --db-instance-identifier $TARGET_DATABASE_INSTANCE_ID \
              --new-db-instance-identifier $DB_INSTANCE_IDENTIFIER_TEMP_OLD \
              --apply-immediately

            until ( \
              aws rds describe-db-instances \
                --db-instance-identifier $DB_INSTANCE_IDENTIFIER_TEMP_OLD \
                --query 'DBInstances[].DBInstanceStatus | [0]' \
                --no-paginate \
                --output text \
                | grep -iqP '^available$' \
              );
            do
              echo "Still renaming from $TARGET_DATABASE_INSTANCE_ID to $DB_INSTANCE_IDENTIFIER_TEMP_OLD."
              sleep 1s
            done

            aws rds modify-db-instance \
              --db-instance-identifier $DB_INSTANCE_IDENTIFIER_TEMP_NEW \
              --new-db-instance-identifier $TARGET_DATABASE_INSTANCE_ID \
              --apply-immediately

            until ( \
              aws rds describe-db-instances \
                --db-instance-identifier $TARGET_DATABASE_INSTANCE_ID \
                --query 'DBInstances[].DBInstanceStatus | [0]' \
                --no-paginate \
                --output text \
                | grep -iqP '^available$' \
              );
            do
              echo "Still renaming from $DB_INSTANCE_IDENTIFIER_TEMP_NEW to $TARGET_DATABASE_INSTANCE_ID."
              sleep 1s
            done

            # aws rds delete-db-instance \
            #   --db-instance-identifier $DB_INSTANCE_IDENTIFIER_TEMP_OLD \
            #   --skip-final-snapshot \
            #   --delete-automated-backups

            echo "Done!"

jobs:
  check-code-formatting:
    executor: docker-dotnet
    steps:
      - checkout
      - run:
          name: Install dotnet format
          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
      - run:
          name: Run formatter check
          command: ./dotnet-format-local/dotnet-format --check
  build-and-test:
    executor: docker-python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build
          command: docker-compose build SingleViewApi-test
      - run:
          name: Run tests
          command: docker-compose run SingleViewApi-test
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION
  preview-terraform-development:
    executor: docker-terraform
    steps:
      - preview-terraform:
          environment: "development"
  preview-terraform-staging:
    executor: docker-terraform
    steps:
      - preview-terraform:
          environment: "staging"
  preview-terraform-production:
    executor: docker-terraform
    steps:
      - preview-terraform:
          environment: "production"
  terraform-init-and-apply-to-development:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "development"
  terraform-init-and-apply-to-staging:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "staging"
  terraform-init-and-apply-to-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "production"
  migrate-database-development:
    executor: docker-dotnet
    steps:
      - migrate-database:
          stage: "development"
  migrate-database-staging:
    executor: docker-dotnet
    steps:
      - migrate-database:
          stage: "staging"
  migrate-database-production:
    executor: docker-dotnet
    steps:
      - migrate-database:
          stage: "production"
  deploy-to-development:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "development"
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  deploy-to-staging:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "staging"
          aws-account: $AWS_ACCOUNT_STAGING
  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "production"
          aws-account: $AWS_ACCOUNT_PRODUCTION
  test-job:
    executor: aws-cli/default
    steps:
      - test-command

workflows:
  feature-branch-checks:
    jobs:
      - check-code-formatting:
          context: api-nuget-token-context
      - build-and-test:
          context: api-nuget-token-context
          requires:
            - check-code-formatting
          filters:
            branches:
              ignore:
                - development
                - master
      - assume-role-development:
          context: api-assume-role-corporate-development-context
          filters:
            branches:
              ignore:
                - development
                - master
      - preview-terraform-development:
          requires:
            - assume-role-development
          filters:
            branches:
              ignore:
                - development
                - master
      - assume-role-staging:
          context: api-assume-role-corporate-staging-context
          filters:
            branches:
              ignore:
                - development
                - master
      - preview-terraform-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              ignore:
                - development
                - master
      - assume-role-production:
          context: api-assume-role-corporate-production-context
          filters:
            branches:
              ignore:
                - development
                - master
      - preview-terraform-production:
          requires:
            - assume-role-production
          filters:
            branches:
              ignore:
                - development
                - master
      - test-job:
          requires:
            - assume-role-production
          filters:
            branches:
              only: re-encrypt-the-database

  check-and-deploy-development:
    jobs:
      - check-code-formatting:
          context: api-nuget-token-context
          filters:
            branches:
              only: development
      - build-and-test:
          context: api-nuget-token-context
          requires:
            - check-code-formatting
          filters:
            branches:
              only: development
      - assume-role-development:
          context: api-assume-role-corporate-development-context
          requires:
            - build-and-test
          filters:
            branches:
              only: development
      - migrate-database-development:
          context: api-nuget-token-context
          requires:
            - assume-role-development
          filters:
            branches:
              only: development
      - preview-terraform-development:
          requires:
            - assume-role-development
          filters:
            branches:
              only: development
      - permit-development-terraform-release:
          type: approval
          requires:
            - preview-terraform-development
          filters:
            branches:
              only: development
      - terraform-init-and-apply-to-development:
          requires:
            - migrate-database-development
            - permit-development-terraform-release
          filters:
            branches:
              only: development
      - deploy-to-development:
          context: api-nuget-token-context
          requires:
            - terraform-init-and-apply-to-development
          filters:
            branches:
              only: development
  check-and-deploy-staging-and-production:
    jobs:
      - build-and-test:
          context: api-nuget-token-context
          filters:
            branches:
              only: master
      - assume-role-staging:
          context: api-assume-role-corporate-staging-context
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - migrate-database-staging:
          context: api-nuget-token-context
          requires:
            - assume-role-staging
          filters:
            branches:
              only: master
      - preview-terraform-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: master
      - permit-staging-terraform-release:
          type: approval
          requires:
            - preview-terraform-staging
          filters:
            branches:
              only: master
      - terraform-init-and-apply-to-staging:
          requires:
            - migrate-database-staging
            - permit-staging-terraform-release
          filters:
            branches:
              only: master
      - deploy-to-staging:
          context: api-nuget-token-context
          requires:
            - terraform-init-and-apply-to-staging
          filters:
            branches:
              only: master
      - start-production-release:
          type: approval
          requires:
            - deploy-to-staging
          filters:
              branches:
                only: master
      - assume-role-production:
          context: api-assume-role-corporate-production-context
          requires:
            - start-production-release
          filters:
            branches:
              only: master
      - migrate-database-production:
          context: api-nuget-token-context
          requires:
            - assume-role-production
          filters:
            branches:
              only: master
      - preview-terraform-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: master
      - permit-production-terraform-release:
          type: approval
          requires:
            - preview-terraform-production
          filters:
            branches:
              only: master
      - terraform-init-and-apply-to-production:
          requires:
            - migrate-database-production
            - permit-production-terraform-release
          filters:
            branches:
              only: master
      - permit-production-api-release:
          type: approval
          requires:
            - terraform-init-and-apply-to-production
          filters:
            branches:
              only: master
      - deploy-to-production:
          context: api-nuget-token-context
          requires:
            - permit-production-api-release
            - terraform-init-and-apply-to-production
          filters:
            branches:
              only: master
