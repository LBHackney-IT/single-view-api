// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SingleViewApi.V1.Infrastructure;

#nullable disable

namespace SingleViewApi.V1.Infrastructure.Migrations
{
    [DbContext(typeof(SingleViewContext))]
    partial class SingleViewContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SingleViewApi.V1.Infrastructure.CustomerDataSourceDbEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CustomerDbEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<int>("DataSourceId")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_id");

                    b.Property<string>("SourceId")
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerDbEntityId");

                    b.ToTable("customer_data_sources");
                });

            modelBuilder.Entity("SingleViewApi.V1.Infrastructure.CustomerDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("NiNumber")
                        .HasColumnType("text")
                        .HasColumnName("ni_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("SingleViewApi.V1.Infrastructure.DataSourceDbEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("data_sources");
                });

            modelBuilder.Entity("SingleViewApi.V1.Infrastructure.CustomerDataSourceDbEntity", b =>
                {
                    b.HasOne("SingleViewApi.V1.Infrastructure.CustomerDbEntity", null)
                        .WithMany("DataSources")
                        .HasForeignKey("CustomerDbEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SingleViewApi.V1.Infrastructure.CustomerDbEntity", b =>
                {
                    b.Navigation("DataSources");
                });
#pragma warning restore 612, 618
        }
    }
}
