service: SingleViewApi
provider:
  name: aws
  runtime: dotnet6
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  # TODO: Enable this line if DynamoDb is in use
  #account: ${opt:account}
  region: eu-west-2
  apiKeys:
    - secureAccess:
        - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100

package:
# TODO: Rename zipfile in build.sh and build.cmd to match this
  artifact: ./bin/release/net6.0/SingleViewApi.zip

functions:
  SingleViewApi:
    name: ${self:service}-${self:provider.stage}
    handler: SingleViewApi::SingleViewApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    vpc: ${self:custom.vpc.${opt:stage}}
    environment:
      # TODO: Create ssm variables for this API's postgres mirror then rename SingleViewApi below to match api name
      HOUSING_SEARCH_API_V1: ${ssm:/single-view/${self:provider.stage}/housing-search-v1}
      CONNECTION_STRING: Host=${ssm:/single-view/${self:provider.stage}/postgres-hostname};Port=5302;Database=singleview;Username=${ssm:/single-view/${self:provider.stage}/postgres-username};Password=${ssm:/single-view/${self:provider.stage}/postgres-password}
      PERSON_API_V1: ${ssm:/single-view/${self:provider.stage}/person-v1}
      JIGSAW_LOGIN_URL: ${ssm:/single-view/${self:provider.stage}/jigsaw-login-url}
      REDIS_HOST: ${ssm:/single-view/${self:provider.stage}/redis-host}
      CONTACT_DETAILS_API_V2: ${ssm:/single-view/${self:provider.stage}/contact-details-v2}
      NOTES_API_V2: ${ssm:/single-view/${self:provider.stage}/notes-v2}
      EQUALITY_INFORMATION_API_V1: ${ssm:/single-view/${self:provider.stage}/equality-v1}
      JIGSAW_CUSTOMER_API: ${ssm:/single-view/${self:provider.stage}/jigsaw-customer} #this replaced with prototype API in dev and staging
      RSA_PRIVATE_KEY: ${ssm:/single-view/${self:provider.stage}/RSA_PRIVATE_KEY}
      ACADEMY_API_V1: ${ssm:/single-view/${self:provider.stage}/academy-v1}
      CAUTIONARY_ALERTS_API: ${ssm:/single-view/${self:provider.stage}/cautionary-alerts-v1}
      ACADEMY_API_KEY: ${ssm:single-view/${self:provider.stage}/academy-api-key}


    events:
      - http:
          path: /{proxy+}
          method: ANY
          private: false
          cors:
            origin: '*'
            headers:
              - Content-Type
              - If-Match
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-correlation-id
            allowCredentials: false
      - http:
          path: /swagger/{proxy+}
          method: GET
          private: false
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
custom:
  vpc:
    development:
      securityGroupIds:
        - 'sg-0dda44bf3e0f155d3'
      subnetIds:
        - 'subnet-068ec0a87972e4714'
        - 'subnet-05fe49c939c6c7b1e'
        - 'subnet-07ba583cbf5207869'
        - 'subnet-0b0b79fab8c3fd705'
    staging:
      securityGroupIds:
        - 'sg-0554acb53fa61331c'
      subnetIds:
        - 'subnet-05e41a7c805051449'
        - 'subnet-02e2bfa025835cc20'
        - 'subnet-04fe111167269c8c2'
        - 'subnet-0dc9e293451de5466'
    production:
      securityGroupIds:
        - 'sg-093b2a97fa68e75f2'
      subnetIds:
        - 'subnet-0549806bb139ea8be'
        - 'subnet-0ee03e80fcc765fb2'
        - 'subnet-04f3f27d8d1bb349f'
        - 'subnet-012bdebbf8bf17369'
